[
["index.html", "R for Social Science Prerequisites Outline", " R for Social Science Josiah Parry 2018-12-04 Prerequisites R is installed Working knowledge of basic algebra you know what PEMDAS stands for you know what substitution is i.e. solve for y when y = 3x - 3, and x = 1 Working knowledge of basic statistics mean, median, mode you kind of remember what a t-test is and what a p-value is Working knowledge of basic computer science principles logical values / statements (i.e. true, false, true and false, etc.) iteration If you feel iffy about any of that, a quick google search will help, or just send it and continue. Outline This outline will help me guide what I will write and cover. This is a list of the things that I think are important to know as a data scientist. the basics r as a calculator data types functions selecting object indexes tidyverse tibble selecting filter grouping summarising plotting reshaping presenting (Rmd) data visualization univariate histogram density plot (pmf / cmf) violin plot boxplot multivariate scatter plot (2 numeric) bar plot (1 nominal 1 numeric) boxplot (1 nominal 1 numeric) violin plot (1 nominal 1 numeric) map making (GIS) projections coordinate reference systems vector data shapefiles sf package oh looks, its a dataframe making the map density maps point density kernel density statistical modeling (machine learning) supervised learning Linear Regression (continuous prediction) Logistic Regression (classification) data preprocessing cross validation (k-fold) train, test, validate scaling &amp; centering (standardization) normalization imputation dimensionality reduction pca / lda backward feature selection supervised continued k-nearest neighbors Support Vector Machines (classification) Naive bayes (classification) random forest (regression / classification) gradient boosted trees (regression / classification) Unsupervised learning hierarchical clustering (classification) k-means neural networks natual language processing / text mining "],
["intro.html", "Chapter 1 The Basics 1.1 Arithmetic Operators 1.2 Creating Variables 1.3 Logical operators 1.4 Data Types!", " Chapter 1 The Basics This section will go over the different types of data that we will use in R. Before we get into that, we need to know the basic workings of R. We can use R like a calculator. To be honest, everything that follows might be better learned from DataCamp’s Free Introduction to R. But if you’re still with me, I’m going to go over this stuff kind of quickly. 1.1 Arithmetic Operators ^ : exponentiation (exponents) [E] * : multiplication [M] / : division [D] + : addition [A] - : subtraction [S] These can be used together in parentheses [P] ( ) to determine the order of operations (PEMDAS) 2 ^ 2 ## [1] 4 2 * 3 ## [1] 6 4 / 2 ## [1] 2 1 + 3 ## [1] 4 3 - 2 ## [1] 1 1.2 Creating Variables So, as I said, knowledge of substition is a prerequisite. We can create new variables in our R environment (what’s an environment you ask?) that can be used to reference things. There are many types of variables, but will get into that later. Let’s work with something we’re all familiar with x. Note: I will use the words variable and object interchangeably throughout this. Say we want to solve y = 3x + 2 for when x = 5. We can create a variable for x and then make one for y. We create variables with the assignment operator/arrow, &lt;-. Mr. Jared Lander taught me that x &lt;- 1 formally reads as _“x gets 1”. To me, it just means they are set equal, like an equation. # This is a comment. This won&#39;t be run by R. x &lt;- 1 # You can print the variable by just writing it x ## [1] 1 Now let’s try some math with the variable. x * 3 ## [1] 3 x + 2 ## [1] 3 Alright, you’re getting the idea. How about using our formula above? 3 * x + 2 ## [1] 5 Okay, now lets create a new object called, y, which is the output of the above operation. y &lt;- 3 * x + 2 Here, y takes on the value of whatever is to the right of it. This is the case whenever you assign any object. 1.3 Logical operators Alright, this might get a little tricky, and if you struggle try cheking out section 5.2.2 of R for Data Science. &lt; : less than &gt; : greater than &lt;= : less than or equal to &gt;= : greater than or equal to == : exactly equal (I like to think of it as “are these the same thing?”) != : not equal ( “are these things not the same”) Let’s bring it back to early algebra. Let’s say x = 3 and y = 5. Is x less than y? # set variables. x &lt;- 3 y &lt;- 5 x &lt; y ## [1] TRUE # greater than? x &gt; y ## [1] FALSE # less than or equal x &lt;= y ## [1] TRUE # greater or equal x &gt;= y ## [1] FALSE # exactly equal? x == y ## [1] FALSE # not equal x != y ## [1] TRUE Alright, so now I want to talk about the ! (called the bang operator) and its nuance. See how we put ! in front of our =? The bang operator essentially checks the opposite of a thing. So in this case it checked the opposite of equals. If we put ! in front of a logical statement, it will reverse the outcome. 1 == 1 ## [1] TRUE !(1 == 1) ## [1] FALSE Now I want to introduce two more logical operators, and (&amp;), and or (|). &amp; checks multiple conditions and will return TRUE only if they are both TRUE. | will return TRUE when one of the conditions is TRUE. Now for an illustrative example for &amp; statements : # We have TRUE and TRUE, this should be false because they aren&#39;t both TRUE TRUE &amp; FALSE ## [1] FALSE # both a TRUE, we expect TRUE TRUE &amp; TRUE ## [1] TRUE # The first statement is TRUE, but the second is not TRUE, expect FALSE (1 == 1) &amp; (1 &lt; 1) ## [1] FALSE # The first statement is TRUE and the second is TRUE, expect TRUE (1 == 1) &amp; (1 &lt;= 1) ## [1] TRUE Illustrative | statements: Remember, only one condition needs to be TRUE. TRUE | TRUE ## [1] TRUE TRUE | FALSE ## [1] TRUE FALSE | FALSE ## [1] FALSE 1.4 Data Types! Okay! Now you’ve got an idea of the basics of R, maybe you’ve event caught on to some types of Data. There are 4 types of data that you will encounter on a regular basis. You’ve encountered 2 of them already. So, think back to your Stat 101 class. You dealt with discrete, continuous, and nominal data. Discrete data was whole numbers, or integers. Continuous data had decimal points. And nominal data was essentially just words. In R we will use: integer: discrete numeric: continuous character: nominal logical To indicate to R that a number is an integer we put an L after the number (why?). We can always check an object’s type by using the function class(). I’ll go over functions briefly later, but you should be able to pick up the intuition—tl;dr, functions take an input and make an output. # numbers are by default &quot;numeric&quot; class(2) ## [1] &quot;numeric&quot; # to specify an integer we can use the `L` class(2L) ## [1] &quot;integer&quot; "],
["introducing-the-tidyverse.html", "Chapter 2 Introducing the tidyverse", " Chapter 2 Introducing the tidyverse select and filter "],
["aggregation.html", "Chapter 3 Aggregation", " Chapter 3 Aggregation count, group_by, summarise, "],
["visualization.html", "Chapter 4 Visualization", " Chapter 4 Visualization ggplot and stuff "],
["ok-but-where-gis.html", "Chapter 5 Ok, but where? (GIS)", " Chapter 5 Ok, but where? (GIS) coordinate reference systems, projections, shapefiles, vector data, raster, point density, yah. "],
["statistical-modelling-regression.html", "Chapter 6 statistical modelling (Regression)", " Chapter 6 statistical modelling (Regression) simple linear, multiple linear, logistic. "],
["data-preprocessing.html", "Chapter 7 Data preprocessing", " Chapter 7 Data preprocessing center, scale, standardize, normalize, cross validation, dimensionality reduction, feature selection "],
["supervised-learning.html", "Chapter 8 supervised learning", " Chapter 8 supervised learning knn, svm, nb, rf, xgb "],
["unsupervised-learning.html", "Chapter 9 Unsupervised learning", " Chapter 9 Unsupervised learning "],
["text-mining-natual-language-processing-nlp.html", "Chapter 10 text-mining / natual language processing (nlp)", " Chapter 10 text-mining / natual language processing (nlp) Honestly, just read tidy text text tokens stop words sentiment stemming "]
]
